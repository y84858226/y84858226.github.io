<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[BufferRandomAccessFile]]></title>
      <url>/2017/11/03/BufferRandomAccessFile/</url>
      <content type="html"></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[JVM加载class文件的原理机制]]></title>
      <url>/2017/10/03/JVM%E5%8A%A0%E8%BD%BDclass%E6%96%87%E4%BB%B6%E7%9A%84%E5%8E%9F%E7%90%86%E6%9C%BA%E5%88%B6/</url>
      <content type="html"><![CDATA[<p> Java中的所有类，都需要由类加载器装载到JVM中才能运行。类加载器本身也是一个类，而它的工作就是把class文件从硬盘读取到内存中。在写程序的时候，我们几乎不需要关心类的加载，因为这些都是隐式装载的，除非我们有特殊的用法，像是反射，就需要显式的加载所需要的类。</p>
<p> Java类的加载是动态的，它并不会一次性将所有类全部加载后再运行，而是保证程序运行的基础类(像是基类)完全加载到jvm中，至于其他类，则在需要的时候才加载。这当然就是为了节省内存开销。</p>
<h5 id="Java的类加载器有三个，对应Java的三种类"><a href="#Java的类加载器有三个，对应Java的三种类" class="headerlink" title="Java的类加载器有三个，对应Java的三种类:"></a>Java的类加载器有三个，对应Java的三种类:</h5><p> ==Bootstrap Loader==  // 负责加载系统类 (指的是内置类，像是String，对应于C#中的System类和C/C++标准库中的类)</p>
<p> ==ExtClassLoader==   // 负责加载扩展类(就是继承类和实现类)</p>
<p> ==AppClassLoader==   // 负责加载应用类(程序员自定义的类)<br> 三个加载器各自完成自己的工作，但它们是如何协调工作呢？哪一个类该由哪个类加载器完成呢？为了解决这个问题，Java采用了委托模型机制。</p>
<p> 委托模型机制的工作原理很简单：当类加载器需要加载类的时候，先请示其Parent(即上一层加载器)在其搜索路径载入，如果找不到，才在自己的搜索路径搜索该类。这样的顺序其实就是加载器层次上自顶而下的搜索，因为加载器必须保证基础类的加载。之所以是这种机制，还有一个安全上的考虑：如果某人将一个恶意的基础类加载到jvm，委托模型机制会搜索其父类加载器，显然是不可能找到的，自然就不会将该类加载进来。</p>
<h5 id="我们可以通过这样的代码来获取类加载器"><a href="#我们可以通过这样的代码来获取类加载器" class="headerlink" title="我们可以通过这样的代码来获取类加载器:"></a>我们可以通过这样的代码来获取类加载器:</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ClassLoader loader = ClassName.class.getClassLoader();</div><div class="line">ClassLoader ParentLoader = loader.getParent();</div></pre></td></tr></table></figure>
<p>注意一个很重要的问题，就是Java在逻辑上并不存在BootstrapKLoader的实体！因为它是用C++编写的，所以打印其内容将会得到null。</p>
<h5 id="前面是对类加载器的简单介绍，它的原理机制非常简单，就是下面几个步骤"><a href="#前面是对类加载器的简单介绍，它的原理机制非常简单，就是下面几个步骤" class="headerlink" title="前面是对类加载器的简单介绍，它的原理机制非常简单，就是下面几个步骤:"></a>前面是对类加载器的简单介绍，它的原理机制非常简单，就是下面几个步骤:</h5><p>1.装载:查找和导入class文件;</p>
<p>2.连接:</p>
<p>(1)检查:检查载入的class文件数据的正确性;<br>(2)准备:为类的静态变量分配存储空间;<br>(3)解析:将符号引用转换成直接引用(这一步是可选的)</p>
<p>3.初始化:初始化静态变量，静态代码块。</p>
<p> 这样的过程在程序调用类的静态成员的时候开始执行，所以静态方法main()才会成为一般程序的入口方法。类的构造器也会引发该动作。</p>
]]></content>
      
        
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/2017/08/08/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
      
        
    </entry>
    
  
  
</search>
